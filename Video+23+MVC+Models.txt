
==============================
**1. Kh√°i ni·ªám MVC l√† g√¨?**
============================== 

MVC l√† m√¥ h√¨nh ki·∫øn tr√∫c ph·∫ßn m·ªÅm chia ·ª©ng d·ª•ng th√†nh 3 ph·∫ßn ri√™ng bi·ªát:

**Model (M):** Schema 
- ƒê·∫°i di·ªán cho d·ªØ li·ªáu v√† logic nghi·ªáp v·ª•. 
- Ch·ªãu tr√°ch nhi·ªám l∆∞u tr·ªØ, truy xu·∫•t v√† x·ª≠ l√Ω d·ªØ li·ªáu (th∆∞·ªùng t∆∞∆°ng t√°c v·ªõi database).
- V√≠ d·ª•: ƒê·ªãnh nghƒ©a schema User, thao t√°c CRUD v·ªõi MongoDB/MySQL.

**View (V):** 
- Ph·∫ßn giao di·ªán hi·ªÉn th·ªã d·ªØ li·ªáu cho ng∆∞·ªùi d√πng. 
- Trong backend Express, View c√≥ th·ªÉ l√† template engine (EJS, Pug, Handlebars) ho·∫∑c tr·∫£ JSON ƒë·ªÉ frontend render.

Single page Application * IMPORTANT <> Multipage application 

**Controller (C):**
- Nh·∫≠n request t·ª´ client, g·ªçi Model ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu, sau ƒë√≥ tr·∫£ v·ªÅ View.
- Gi√∫p t√°ch bi·ªát logic ƒëi·ªÅu h∆∞·ªõng request v√† d·ªØ li·ªáu.

üëâ **∆Øu ƒëi·ªÉm:** D·ªÖ b·∫£o tr√¨, d·ªÖ m·ªü r·ªông, code r√µ r√†ng v√† ph√¢n chia tr√°ch nhi·ªám.

------------------------------
**2. V√≠ d·ª• minh h·ªça v·ªõi ExpressJS (REST API)**
------------------------------
Gi·∫£ s·ª≠ ta l√†m app qu·∫£n l√Ω User.

**C·∫•u tr√∫c th∆∞ m·ª•c MVC:**
```
project/
‚îÇ‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ userModel.js
‚îÇ‚îÄ‚îÄ controllers/
‚îÇ   ‚îî‚îÄ‚îÄ userController.js
‚îÇ‚îÄ‚îÄ routes/
‚îÇ   ‚îî‚îÄ‚îÄ userRoutes.js
‚îÇ‚îÄ‚îÄ app.js
```

üìå **1. Model ‚Äì models/userModel.js**
V√≠ d·ª• v·ªõi MongoDB + Mongoose:

```js
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  age: Number,
});

const User = mongoose.model("User", userSchema);

module.exports = User;
```

üìå **2. Controller ‚Äì controllers/userController.js**
```js
const User = require("../models/userModel");

// L·∫•y t·∫•t c·∫£ user
exports.getUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.json(users); // View ·ªü ƒë√¢y l√† JSON
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// T·∫°o user m·ªõi
exports.createUser = async (req, res) => {
  try {
    const newUser = new User(req.body);
    await newUser.save();
    res.status(201).json(newUser);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};
```

üìå **3. Route ‚Äì routes/userRoutes.js**
```js
const express = require("express");
const router = express.Router();
const userController = require("../controllers/userController");

// ƒê·ªãnh nghƒ©a endpoint
router.get("/", userController.getUsers); example.com/
router.post("/", userController.createUser); 

module.exports = router;
```

üìå **4. App ch√≠nh ‚Äì app.js** 
```js
const express = require("express");
const mongoose = require("mongoose");
const userRoutes = require("./routes/userRoutes");

const app = express();
app.use(express.json());

// K·∫øt n·ªëi DB
mongoose.connect("mongodb://localhost:27017/mvc_demo", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// S·ª≠ d·ª•ng routes
app.use("/api/users", userRoutes);

app.listen(3000, () => console.log("Server running on port 3000"));
```

------------------------------
**3. Ho·∫°t ƒë·ªông c·ªßa MVC trong v√≠ d·ª• tr√™n:**
------------------------------

- Client g·ªçi API: `GET /api/users`
  ‚Üí Router ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn Controller ‚Üí Controller g·ªçi Model ‚Üí Model l·∫•y d·ªØ li·ªáu t·ª´ DB ‚Üí tr·∫£ JSON v·ªÅ client (View).

- Client g·ªçi API: `POST /api/users`
  ‚Üí Router ‚Üí Controller ‚Üí t·∫°o user m·ªõi trong Model ‚Üí l∆∞u DB ‚Üí tr·∫£ v·ªÅ JSON k·∫øt qu·∫£.

