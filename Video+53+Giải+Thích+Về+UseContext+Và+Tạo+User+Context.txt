# ⚛️ useContext và User Context - Hướng dẫn chi tiết

## 1. 🤔 useContext là gì?

**useContext** là một React Hook giúp chia sẻ dữ liệu giữa các component mà không cần truyền props qua từng cấp (tránh "prop drilling").

<HamA name={} email={} />

### ❌ Vấn đề trước khi có useContext:
```javascript
// Phải truyền props qua nhiều cấp
function App() {
  const [user, setUser] = useState(null);
  return <Header user={user} setUser={setUser} />;
}

function Header({ user, setUser }) {
  return <UserInfo user={user} setUser={setUser} />;
}

function UserInfo({ user, setUser }) {
  return <span>{user?.name}</span>;
}
```

### ✅ Giải pháp với useContext:
```javascript
// Dữ liệu được chia sẻ toàn cục, không cần truyền props
function App() {
  return (
    <UserProvider> 
      <Header />
    </UserProvider>
  );
}

function Header() {
  return <UserInfo />;
}

function UserInfo() {
  const { user } = useContext(UserContext);
  return <span>{user?.name}</span>;
}
```

## 2. ⚙️ Cách hoạt động trong User Context

### 🔧 Bước 1: Tạo Context
```javascript
const UserContext = createContext();
```
- 📦 Tạo một "kho chứa" dữ liệu có thể chia sẻ.

### 🎯 Bước 2: Provider - Cung cấp dữ liệu
```javascript
export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  
  const value = {
    user,        // Thông tin người dùng
    setUser,     // Hàm cập nhật
  };

  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
};
```
- **UserProvider** bọc quanh các component con và cung cấp dữ liệu cho chúng.

### 🔌 Bước 3: Sử dụng Context
```javascript
const { user, setUser } = useContext(UserContext);
```

## 3. 💡 Ví dụ sử dụng thực tế

### 📱 Bước 1: Bọc App bằng Provider
```javascript
// main.jsx hoặc App.jsx
import { UserProvider } from './contexts/user-context';

function App() {
  return (
    <UserProvider>
      <Router>
        <Header />
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/profile" element={<Profile />} />
          <Route path="/login" element={<Login />} />
        </Routes>
        <Footer />
      </Router>
    </UserProvider>
  );
}
```

### 🎯 Bước 2: Sử dụng trong Header
```javascript
// Header.jsx
import { useContext } from 'react';
import { UserContext } from '../contexts/user-context';

function Header() {
  const { user, setUser } = useContext(UserContext);
  
  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };
  
  return (
    <header>
      {user ? (
        <div>
          <span>Xin chào, {user.tenNguoiDung}!</span>
          <button onClick={handleLogout}>Đăng xuất</button>
        </div>
      ) : (
        <a href="/login">Đăng nhập</a>
      )}
    </header>
  );
}
```

### 🔐 Bước 3: Sử dụng trong trang Login
```javascript
// Login.jsx
import { useContext } from 'react';
import { UserContext } from '../contexts/user-context';

function Login() {
  const { setUser } = useContext(UserContext);
  
  const handleLogin = async (formData) => {
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        const userData = await response.json();
        setUser(userData); // Cập nhật user toàn cục
        localStorage.setItem('user', JSON.stringify(userData));
      }
    } catch (error) {
      console.error('Lỗi đăng nhập:', error);
    }
  };
  
  return (
    <form onSubmit={handleLogin}>
      {/* Form đăng nhập */}
    </form>
  );
}
```

### 👤 Bước 4: Sử dụng trong Profile
```javascript
// Profile.jsx
import { useContext } from 'react';
import { UserContext } from '../contexts/user-context';

function Profile() {
  const { user, setUser } = useContext(UserContext);
  
  const updateProfile = async (newData) => {
    try {
      const response = await fetch(`/api/users/${user.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newData)
      });
      
      if (response.ok) {
        const updatedUser = await response.json();
        setUser(updatedUser); // Cập nhật user toàn cục
        localStorage.setItem('user', JSON.stringify(updatedUser));
      }
    } catch (error) {
      console.error('Lỗi cập nhật:', error);
    }
  };
  
  return (
    <div>
      <h1>Hồ sơ của {user?.tenNguoiDung}</h1>
      <p>Email: {user?.email}</p>
      <p>Số điện thoại: {user?.soDienThoai}</p>
      {/* Form chỉnh sửa profile */}
    </div>
  );
}
```

## 4. 🌟 Lợi ích của useContext

### ✅ Ưu điểm:
- **Tránh prop drilling**: Không cần truyền props qua nhiều cấp
- **Chia sẻ dữ liệu toàn cục**: Mọi component đều có thể truy cập
- **Dễ quản lý state**: Tập trung quản lý dữ liệu ở một nơi
- **Tự động re-render**: Component tự động cập nhật khi dữ liệu thay đổi

### ⚠️ Lưu ý:
- **Performance**: Khi context thay đổi, tất cả component sử dụng nó sẽ re-render
- **Over-usage**: Không nên dùng cho mọi dữ liệu, chỉ dùng cho dữ liệu thực sự cần chia sẻ
- **Complexity**: Có thể làm code phức tạp nếu abuse

## 5. 🚀 Best Practices

### 🎯 1. Tách các Context riêng biệt
```javascript
// Tách riêng thay vì gộp chung
<UserProvider>
  <ThemeProvider>
    <CartProvider>
      <App />
    </CartProvider>
  </ThemeProvider>
</UserProvider>
```

### 🪝 2. Tạo custom hook
```javascript
// hooks/useUser.js
import { useContext } from 'react';
import { UserContext } from '../contexts/user-context';

export const useUser = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUser phải được sử dụng trong UserProvider');
  }
  return context;
};

// Sử dụng
const { user, setUser } = useUser(); // Thay vì useContext(UserContext)
```

### ⚡ 3. Tối ưu performance
```javascript
// Tách dữ liệu ít thay đổi và thường xuyên thay đổi
const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [preferences, setPreferences] = useState({});
  
  // Tách thành 2 context riêng để tránh re-render không cần thiết
  const userValue = useMemo(() => ({ user, setUser }), [user]);
  const preferencesValue = useMemo(() => ({ preferences, setPreferences }), [preferences]);
  
  return (
    <UserContext.Provider value={userValue}>
      <PreferencesContext.Provider value={preferencesValue}>
        {children}
      </PreferencesContext.Provider>
    </UserContext.Provider>
  );
};
```

## 6. 📝 Tóm tắt

- 📦 **Context**: Kho chứa dữ liệu chung
- 🎯 **Provider**: Cung cấp dữ liệu cho component con  
- 🔌 **useContext**: Hook để truy cập dữ liệu từ Context
- 🌟 **Lợi ích chính**: Tránh prop drilling, chia sẻ dữ liệu toàn cục
- ✅ **Sử dụng khi**: Cần chia sẻ dữ liệu giữa nhiều component không liên quan trực tiếp
- ❌ **Không sử dụng khi**: Dữ liệu chỉ cần trong vài component gần nhau
